md
# Header 1
install.packages("barcode")
library(barcode)
library(A3)
search()
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
dir
add2 <- function(x,y) {
x+y
}
add2(3,5)
above <- function(x,n) {
use <- x > n
x[use]
}
x <- 1:20
x
above(x,12)
above <- function(x,n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numberic(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
View(columnmean)
function(y) {
nc <- ncol(y)
means <- numberic(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
View(columnmean)
function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removenNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removenNA)
}
means
}
columnmean(airquality)
## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#1.  set the value of the matrix
#2.  get the value of the matrix
#3.  set the value of the inverse
#4.  get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) i <<- solve
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
# `cacheSolve` function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above.
#If the inverse has already been calculated (and the matrix has not changed), then`cacheSolve` should retrieve the inverse from the cache.
## At the moment giving: Error in x$getinv : $ operator is invalid for atomic vectors
cachesolve <- function(x, ...) {
i<- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i<- solve(data, ...)
x$setinv(i)
i
}
x
m$get()
getwd()
setwd("~/Desktop/Coursera")
## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
#1.  set the value of the matrix
#2.  get the value of the matrix
#3.  set the value of the inverse
#4.  get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) i <<- solve
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
# `cacheSolve` function computes the inverse of the special "matrix" returned by `makeCacheMatrix` above.
#If the inverse has already been calculated (and the matrix has not changed), then`cacheSolve` should retrieve the inverse from the cache.
## At the moment giving: Error in x$getinv : $ operator is invalid for atomic vectors
cachesolve <- function(x, ...) {
i<- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i<- solve(data, ...)
x$setinv(i)
i
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$getinvese()
getwd()
source(cachematrix.R)
dir()
source(acheMatrix.R)
source(CacheMatrix.R)
getwd()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cachesolve <- function(x, ...) {
inv<- x$getinv()
if(!is.null(inv)) {
message("get cached data")
return(inv)
}
data <- x$get()
inv<- solve(data, ...)
x$setinv(inv)
inv
}
m$get()
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cachesolve(m)
cachesolve(m)
source(makecachecatrix)
source(cachematrix.R)
getwd()
ls()
dir()
source(cachematrix.R)
source("cachematrix.R")
m <- makeCacheMatrix(matrix(1:4, 2,2))
m$get()
x$getinv()
m$getinv()
cachesolve(m)
cachesolve(m)
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cachesolve(m)
cachesolve(m)
m$getinv(m)
m$getinv()
getwd()
git clone https://github.com/ravikrg/ProgrammingAssignment2
git clone https://github.com/ravikrg/ProgrammingAssignment2.git
git clon https://github.com/ravikrg/ProgrammingAssignment2.git
clone www.github.com/ravikrg/ProgrammingAssignment2
git
setwd("~/ProgrammingAssignment2")
getwd()
ls()
source("cachematrix")
dir()
source("cachematrix.R")
x
m
